(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[203],{4184:function(e,n){var t;!function(){"use strict";var r={}.hasOwnProperty;function s(){for(var e=[],n=0;n<arguments.length;n++){var t=arguments[n];if(t){var a=typeof t;if("string"===a||"number"===a)e.push(t);else if(Array.isArray(t)){if(t.length){var i=s.apply(null,t);i&&e.push(i)}}else if("object"===a)if(t.toString===Object.prototype.toString)for(var o in t)r.call(t,o)&&t[o]&&e.push(o);else e.push(t.toString())}}return e.join(" ")}e.exports?(s.default=s,e.exports=s):void 0===(t=function(){return s}.apply(n,[]))||(e.exports=t)}()},6798:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/tutorials/ts-type-manipulation",function(){return t(317)}])},1210:function(e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getDomainLocale=function(e,n,t,r){return!1};("function"===typeof n.default||"object"===typeof n.default&&null!==n.default)&&"undefined"===typeof n.default.__esModule&&(Object.defineProperty(n.default,"__esModule",{value:!0}),Object.assign(n.default,n),e.exports=n.default)},8418:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(4941).Z;t(5753).default;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var s,a=(s=t(7294))&&s.__esModule?s:{default:s},i=t(6273),o=t(2725),c=t(3462),l=t(1018),d=t(7190),h=t(1210),p=t(8684);var u="undefined"!==typeof a.default.useTransition,y={};function f(e,n,t,r){if(e&&i.isLocalURL(n)){e.prefetch(n,t,r).catch((function(e){0}));var s=r&&"undefined"!==typeof r.locale?r.locale:e&&e.locale;y[n+"%"+t+(s?"%"+s:"")]=!0}}var g=a.default.forwardRef((function(e,n){var t,s=e.href,g=e.as,x=e.children,m=e.prefetch,j=e.passHref,w=e.replace,b=e.soft,A=e.shallow,v=e.scroll,T=e.locale,k=e.onClick,C=e.onMouseEnter,S=e.legacyBehavior,I=void 0===S?!0!==Boolean(!1):S,M=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,["href","as","children","prefetch","passHref","replace","soft","shallow","scroll","locale","onClick","onMouseEnter","legacyBehavior"]);t=x,!I||"string"!==typeof t&&"number"!==typeof t||(t=a.default.createElement("a",null,t));var O=!1!==m,E=r(u?a.default.useTransition():[],2)[1],N=a.default.useContext(c.RouterContext),B=a.default.useContext(l.AppRouterContext);B&&(N=B);var Q,R=a.default.useMemo((function(){var e=r(i.resolveHref(N,s,!0),2),n=e[0],t=e[1];return{href:n,as:g?i.resolveHref(N,g):t||n}}),[N,s,g]),D=R.href,P=R.as,V=a.default.useRef(D),J=a.default.useRef(P);I&&(Q=a.default.Children.only(t));var F=I?Q&&"object"===typeof Q&&Q.ref:n,L=r(d.useIntersection({rootMargin:"200px"}),3),U=L[0],_=L[1],W=L[2],G=a.default.useCallback((function(e){J.current===P&&V.current===D||(W(),J.current=P,V.current=D),U(e),F&&("function"===typeof F?F(e):"object"===typeof F&&(F.current=e))}),[P,F,D,W,U]);a.default.useEffect((function(){var e=_&&O&&i.isLocalURL(D),n="undefined"!==typeof T?T:N&&N.locale,t=y[D+"%"+P+(n?"%"+n:"")];e&&!t&&f(N,D,P,{locale:n})}),[P,D,_,T,O,N]);var K={ref:G,onClick:function(e){I||"function"!==typeof k||k(e),I&&Q.props&&"function"===typeof Q.props.onClick&&Q.props.onClick(e),e.defaultPrevented||function(e,n,t,r,s,a,o,c,l,d){if("A"!==e.currentTarget.nodeName.toUpperCase()||!function(e){var n=e.currentTarget.target;return n&&"_self"!==n||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey||e.nativeEvent&&2===e.nativeEvent.which}(e)&&i.isLocalURL(t)){e.preventDefault();var h=function(){"softPush"in n&&"softReplace"in n?n[a?s?"softReplace":"softPush":s?"replace":"push"](t):n[s?"replace":"push"](t,r,{shallow:o,locale:l,scroll:c})};d?d(h):h()}}(e,N,D,P,w,b,A,v,T,B?E:void 0)},onMouseEnter:function(e){I||"function"!==typeof C||C(e),I&&Q.props&&"function"===typeof Q.props.onMouseEnter&&Q.props.onMouseEnter(e),i.isLocalURL(D)&&f(N,D,P,{priority:!0})}};if(!I||j||"a"===Q.type&&!("href"in Q.props)){var q="undefined"!==typeof T?T:N&&N.locale,H=N&&N.isLocaleDomain&&h.getDomainLocale(P,q,N.locales,N.domainLocales);K.href=H||p.addBasePath(o.addLocale(P,q,N&&N.defaultLocale))}return I?a.default.cloneElement(Q,K):a.default.createElement("a",Object.assign({},M,K),t)}));n.default=g,("function"===typeof n.default||"object"===typeof n.default&&null!==n.default)&&"undefined"===typeof n.default.__esModule&&(Object.defineProperty(n.default,"__esModule",{value:!0}),Object.assign(n.default,n),e.exports=n.default)},7190:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(4941).Z;Object.defineProperty(n,"__esModule",{value:!0}),n.useIntersection=function(e){var n=e.rootRef,t=e.rootMargin,l=e.disabled||!i,d=s.useRef(),h=r(s.useState(!1),2),p=h[0],u=h[1],y=r(s.useState(null),2),f=y[0],g=y[1];s.useEffect((function(){if(i){if(d.current&&(d.current(),d.current=void 0),l||p)return;return f&&f.tagName&&(d.current=function(e,n,t){var r=function(e){var n,t={root:e.root||null,margin:e.rootMargin||""},r=c.find((function(e){return e.root===t.root&&e.margin===t.margin}));if(r&&(n=o.get(r)))return n;var s=new Map,a=new IntersectionObserver((function(e){e.forEach((function(e){var n=s.get(e.target),t=e.isIntersecting||e.intersectionRatio>0;n&&t&&n(t)}))}),e);return n={id:t,observer:a,elements:s},c.push(t),o.set(t,n),n}(t),s=r.id,a=r.observer,i=r.elements;return i.set(e,n),a.observe(e),function(){if(i.delete(e),a.unobserve(e),0===i.size){a.disconnect(),o.delete(s);var n=c.findIndex((function(e){return e.root===s.root&&e.margin===s.margin}));n>-1&&c.splice(n,1)}}}(f,(function(e){return e&&u(e)}),{root:null==n?void 0:n.current,rootMargin:t})),function(){null==d.current||d.current(),d.current=void 0}}if(!p){var e=a.requestIdleCallback((function(){return u(!0)}));return function(){return a.cancelIdleCallback(e)}}}),[f,l,t,n,p]);var x=s.useCallback((function(){u(!1)}),[]);return[g,p,x]};var s=t(7294),a=t(9311),i="function"===typeof IntersectionObserver;var o=new Map,c=[];("function"===typeof n.default||"object"===typeof n.default&&null!==n.default)&&"undefined"===typeof n.default.__esModule&&(Object.defineProperty(n.default,"__esModule",{value:!0}),Object.assign(n.default,n),e.exports=n.default)},1018:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.FullAppTreeContext=n.AppTreeContext=n.AppRouterContext=void 0;var r,s=(r=t(7294))&&r.__esModule?r:{default:r};var a=s.default.createContext(null);n.AppRouterContext=a;var i=s.default.createContext(null);n.AppTreeContext=i;var o=s.default.createContext(null);n.FullAppTreeContext=o},6292:function(e,n,t){"use strict";t.d(n,{C:function(){return o},N:function(){return c.N}});var r=t(5893),s=(t(7294),t(4789)),a=t(169),i=t.n(a);function o(e){var n=e.children,t=(0,s.G)(i(),"badge");return(0,r.jsx)("span",{className:t,children:n})}var c=t(6144)},6144:function(e,n,t){"use strict";t.d(n,{N:function(){return l}});var r=t(5893),s=t(9583),a=t(3642),i=t(155),o=t(6292),c={Rust:a.OQu,Python:s.osz,SCSS:s.hBm,TypeScript:a.WZi,React:s.huN,"Next.js":i.LsS};function l(e){var n,t=e.technology,s=(n=t,Object.keys(c).includes(n)?c[t]:null);return(0,r.jsxs)(o.C,{children:[s?(0,r.jsx)(s,{}):null," \xa0",t]})}},590:function(e,n,t){"use strict";t.d(n,{FM:function(){return u},gE:function(){return i},o_:function(){return y.o}});var r=t(5893),s=t(7238),a=t.n(s);function i(e){var n=e.children;return(0,r.jsx)("div",{className:a().box,children:n})}var o=t(1664),c=t.n(o),l=t(320),d=t.n(l),h=t(6747),p=function(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return"/blog/"+n.join("/").replace(/\.mdx$/,"")};function u(e){var n,t=e.meta,s=t.publishedOn,a=Boolean(t.publishedOn),i=null!==(n=t.tags)&&void 0!==n?n:[];return(0,r.jsxs)("li",{className:d()["blog-listing"],children:[a?(0,r.jsx)(c(),{href:p(t.category,t.slug),children:(0,r.jsx)("a",{children:(0,r.jsx)("h2",{children:t.title})})}):(0,r.jsx)("h2",{className:d().wip,children:t.title}),(0,r.jsx)(h.W,{date:s}),(0,r.jsx)("p",{children:t.tagline}),(0,r.jsx)("ul",{children:i.map((function(e){return(0,r.jsx)("li",{children:e},e)}))})]})}var y=t(4250)},6747:function(e,n,t){"use strict";t.d(n,{W:function(){return i}});var r=t(5893),s=(t(7294),t(1649)),a=t(6292);function i(e){var n=e.date;if(!n)return(0,r.jsxs)(a.C,{children:[(0,r.jsx)(s.CUJ,{}),"\xa0Work in progress\xa0",(0,r.jsx)(s.CUJ,{})]});var t=new Date(n).toLocaleDateString();return(0,r.jsx)("span",{children:t})}},4250:function(e,n,t){"use strict";t.d(n,{o:function(){return i}});var r=t(5893),s=t(8131),a=t.n(s);function i(e){var n=e.summary,t=e.children;return(0,r.jsxs)("details",{className:a().details,children:[(0,r.jsx)("summary",{className:a().summary,children:n}),(0,r.jsx)("div",{className:a().detailsContent,children:t})]})}},4789:function(e,n,t){"use strict";t.d(n,{G:function(){return l},t:function(){return c}});var r=t(4924),s=t(7294),a=t(4184),i=t.n(a),o=t(7911);function c(){return s.useContext(o.B)}function l(e,n){var t=c();if(t){var s=t.colorScheme,a=n+"--dark";return i()(e[n],(0,r.Z)({},e[a],"dark"===s))}return""}},317:function(e,n,t){"use strict";t.r(n);var r=t(5893),s=t(590);n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=function(){var n=Object.assign({hr:"hr",p:"p",ul:"ul",li:"li",strong:"strong",h2:"h2",a:"a",code:"code",pre:"pre",h3:"h3",h4:"h4",em:"em",blockquote:"blockquote"},e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"title: All of TypeScript's Type Manipulation - A Contrived Example\ntagline: Learn all of TypeScript's techniques for type manipulation in a single example\ncategory: tutorial\ntags:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TypeScript"}),"\n",(0,r.jsx)(n.li,{children:"type manipulation"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n","\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Target audience"}),": Programmers who use TypeScript or similar languages"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Recommended experience level"}),": Novice level exposure to TypeScript or similar languages"]}),"\n",(0,r.jsx)(n.h2,{children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:['In this tutorial, we will build a contrived example of a "library" for a catalog of ',(0,r.jsx)(n.a,{href:"https://developer.android.com/guide/topics/ui/notifiers/toasts",children:"toast messages"})," to be used across many different web applications for a company. In this example, we will use every Type Manipulation feature listed in the ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/types-from-types.html",children:"TypeScript Handbook"}),". Where possible, we will also show real examples from the TypeScript standard definitions that use these features and break down how they work."]}),"\n",(0,r.jsxs)(s.gE,{children:[(0,r.jsx)(n.p,{children:"The reader (you) will get the most out of this tutorial by following along in your code editor."}),(0,r.jsxs)(n.p,{children:["The rest of the tutorial will assume the following ",(0,r.jsx)(n.code,{children:"tsconfig.json"})," configuration."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "strict": true,\n    "target": "ES2020"\n  }\n}\n'})})]}),"\n",(0,r.jsx)(n.h2,{children:"Message Catalog Library - Background and Requirements"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Background"}),': Your company has a successful suite of web applications for project management and productivity with a moderate but growing userbase. However, due to your company\'s rapid growth, the applications have an inconsistent User Experience (UX). Your company is launching an effort to unify the UI/UX across all of the applications, so they can feel like (and marketed as) a true "enterprise" suite.']}),"\n",(0,r.jsx)(n.p,{children:'Your task is to create a "library" to manage a catalog of toast messages shown to the end user in the web application ("library" is used with quotes as we will only build a contrived example in this article). This is an internal library, and the two main user groups are:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Technical writers who will maintain the toast messages in the catalog"}),"\n",(0,r.jsx)(n.li,{children:"Front-end web developers of each application who will fetch the messages from the library to display in their applications"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The requirements for the library are:"}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"/**\n * The first sketch of a message catalog.\n */\n\n// TS gets mad without this `any`!! So annoying!!\nconst messageCatalog: any = {\n  ItemSaveSuccess: {\n    message: 'Item successfully saved!',\n    style: 'fade-away',\n  },\n  ItemSaveFailure: {\n    message: 'Item failed to save...',\n    style: 'click-to-dismiss',\n  },\n}\n\n/**\n * Creates a message with the given messageType from\n * the catalog. For now, just returns the catalog entry.\n */\nexport function createMessage(messageType: string) {\n  if (messageType in messageCatalog) {\n    return messageCatalog[messageType]\n  }\n  throw new Error('Invalid messageType!')\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:'You realize you may need to brush up on TypeScript\'s type system to get the compiler off your back. For now, just the "quick and dirty" solution to appease the type checker.'}),"\n",(0,r.jsx)(n.p,{children:"[TODO](as any image)"}),"\n",(0,r.jsxs)(n.p,{children:["Although we've only just started, we've reached our first ",(0,r.jsx)(n.strong,{children:"checkpoint"}),"! The progress so far can be seen in this ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/play?target=7#code/PQKhCgAIUgVALAppAZgSwE4GcAuksDWiOAxvJAPYqQCGkAtolljQObIk040A2FrAOighg4cCQoA7XAyYt2AYS69+kALyQA3lEgBJHInoBlGgDdERgK4kScgFxadkWczaIHAcn2H8128xRLHh4AT3wzRAATAEIPABonfBwQnndIDxQaSMQAWhoAdxoQ+J0AXwTnb2MIgDEaNB5LDDTtZ2dGV3ZPKtR61MjIHApw8wExkraklLSPEh40EgIcoZzItCx6dawJyHLwUrFQCGhIBWauJloXeWR8tBxyB+RWNHNJa7dYEIAHZBQMCj0YSDJCQTjcPiCSA1CgYSCSCj5OKQABWlhkzRwTWkII4ykhkEQkhwGBCQmgokQAA9vrC8IFJCQcGgpGDzgYALJyNwACg6Ny+vwcuAwaEkrAAlI5JmhqHzuexBcgxR9FPj+FLWpNIMBgHAjJB2DgsAwspA7g8KJY8A91pAAAY0SQhe3RaKQIzDJ0IkJi1huxLOCTSPDglSsBxOsIafluJQQ-iByCY7Fg9WsADascVP0QAF1EgdJg8Afl4YgywBRDAAjA8rySUy8NADbOIJWxCX7cBAA",children:"TypeScript playground"})," link."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each entry in the catalog should have a message with interpolated variables and other fields to ensure a consistent UX for the end-user. As a pseudo example:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"[\n  ItemSaveSuccess: {\n    message: 'Item successfully saved!',\n    style: 'success',\n  },\n  ItemSaveFailure: {\n    message: 'Item failed to save...',\n    style: 'failure',\n  },\n]\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The technical writers are comfortable with Markdown and version control (git), but TypeScript is a little new. The compiler should ensure that they are adding/modifying catalog entries with the correct fields"}),"\n",(0,r.jsx)(n.li,{children:"The front-end application developers should be able to easily call a type-safe API of the library to get the necessary message to display in the application"}),"\n",(0,r.jsx)(n.li,{children:"The library should be open to further enhancements to accommodate internationalization and translations of the messages -- your company will soon expand its operations outside of your home country"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In order to accomplish this, we'll need to use a few advanced features of TypeScript (for the purpose of this article, we will use ",(0,r.jsx)(n.strong,{children:"all"})," advanced features even if they don't quite fit \ud83d\ude42). However, before we introduce the advanced features, we should do a quick recap of the essential/fundamental features of TypeScript."]}),"\n",(0,r.jsx)(n.h2,{children:"Quick Recap - TypeScript Fundamental Types"}),"\n",(0,r.jsx)(n.p,{children:"In this section, we'll do a quick recap on the fundamental types in TypeScript."}),"\n",(0,r.jsxs)(n.p,{children:["For readers with significant TypeScript experience, feel free to skim this section or ",(0,r.jsx)(n.a,{href:"TODO",children:"click here"})," to skip to the next section."]}),"\n",(0,r.jsx)(n.h3,{children:"Quick Recap - Everyday Types"}),"\n",(0,r.jsxs)(n.p,{children:["In the code below, what are the types of ",(0,r.jsx)(n.code,{children:"message"})," and ",(0,r.jsx)(n.code,{children:"count"}),"?"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"const message = 'hello'\nconst count = 5\n"})}),"\n",(0,r.jsxs)(s.o_,{title:"Answer",children:[(0,r.jsxs)(n.p,{children:["If you said ",(0,r.jsx)(n.code,{children:"string"})," and ",(0,r.jsx)(n.code,{children:"number"}),", respectively, then sorry but that is not correct!"]}),(0,r.jsxs)(n.p,{children:["The type of ",(0,r.jsx)(n.code,{children:"message"})," is ",(0,r.jsx)(n.code,{children:'"hello"'})," and the type of ",(0,r.jsx)(n.code,{children:"count"})," is ",(0,r.jsx)(n.code,{children:"5"}),"."]}),(0,r.jsxs)(n.p,{children:["TypeScript has ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types",children:"literal types"}),", and as stated in that documentation, this isn't important by itself but is significant when combined with the topics seen later."]}),(0,r.jsxs)(n.p,{children:["If we had used ",(0,r.jsx)(n.code,{children:"let"})," instead of ",(0,r.jsx)(n.code,{children:"const"}),", the types would have been ",(0,r.jsx)(n.code,{children:"string"})," and ",(0,r.jsx)(n.code,{children:"number"}),", respectively."]})]}),"\n",(0,r.jsx)(n.h3,{children:"Quick Recap - Primitive Types and Arrays"}),"\n",(0,r.jsxs)(n.p,{children:["Each of JavaScript's primitive types - ",(0,r.jsx)(n.code,{children:"boolean"}),", ",(0,r.jsx)(n.code,{children:"number"}),", ",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"bigint"}),", ",(0,r.jsx)(n.code,{children:"symbol"}),", ",(0,r.jsx)(n.code,{children:"null"}),", and ",(0,r.jsx)(n.code,{children:"undefined"})," - have the corresponding type in TypeScript."]}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsx)(n.h3,{children:"Quick Recap - Union Types"}),"\n",(0,r.jsxs)(n.p,{children:["TypeScript uses the ",(0,r.jsx)(n.code,{children:"|"})," operator to create a union type. Something that is type ",(0,r.jsx)(n.code,{children:"A | B | C"})," can be ",(0,r.jsx)(n.code,{children:"A"})," OR ",(0,r.jsx)(n.code,{children:"B"})," OR ",(0,r.jsx)(n.code,{children:"C"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"An example of a union type from TypeScript's standard definitions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"type PropertyKey = string | number | symbol\n"})}),"\n",(0,r.jsx)(n.p,{children:"A valid property key in a JavaScript object is a string OR a number OR a symbol."}),"\n",(0,r.jsxs)(n.p,{children:["We can also create our own union types using the ",(0,r.jsx)(n.code,{children:"type"})," keyword:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"type ChessRow = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8\ntype ChessColumn = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["There are 8 possibilities for ",(0,r.jsx)(n.code,{children:"ChessRow"})," and 8 possibilities for ",(0,r.jsx)(n.code,{children:"ChessColumn"}),". If we had a hypothetical ",(0,r.jsx)(n.code,{children:"ChessRowOrColumn"})," that was ",(0,r.jsx)(n.code,{children:"ChessRow | ChessColumn"})," there would be 16 possibilities (the ",(0,r.jsx)(n.strong,{children:"sum"})," of all the possibilities)."]}),"\n",(0,r.jsx)(n.h3,{children:"Quick Recap - Object Types"}),"\n",(0,r.jsx)(n.p,{children:"Object types are defined with similar syntax to object values, except with types instead of values. For example, an object type for a point with x and y values could be:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"{ x: number, y: number }\n"})}),"\n",(0,r.jsx)(n.p,{children:"This object type can be used anywhere that types can normally be used, such as for function parameters."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"function euclideanDistance(\n  point1: { x: number; y: number },\n  point2: { x: number; y: number },\n): number {\n  return Math.sqrt((point1.x - point1.x) ** 2 + (point2.y - point1.y) ** 2)\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"However, we don't often use object types directly, it can be more convenient to assign names to object types and use those names."}),"\n",(0,r.jsx)(n.h4,{children:"Object Types - Interface"}),"\n",(0,r.jsxs)(n.p,{children:["Object types can be defined with the ",(0,r.jsx)(n.code,{children:"interface"})," keyword. Below is an example of an object type from the TypeScript standard definitions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"interface Error {\n  name: string\n  message: string\n  stack?: string\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:['Where union types can be thought of a "OR" types, object types in TypeScript can be thought of as "AND" types -- an ',(0,r.jsx)(n.code,{children:"Error"})," is a ",(0,r.jsx)(n.code,{children:"name"})," AND a ",(0,r.jsx)(n.code,{children:"message"})," AND (maybe) a ",(0,r.jsx)(n.code,{children:"stack"}),". Some other languages call these record types, or a more general name could be ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Product_type",children:"product types"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This is the object created when you use ",(0,r.jsx)(n.code,{children:"new Error('...')"}),", and it contains a ",(0,r.jsx)(n.code,{children:"name"}),", ",(0,r.jsx)(n.code,{children:"message"}),", and optional ",(0,r.jsx)(n.code,{children:"stack"})," properties that are type ",(0,r.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Interfaces can use the ",(0,r.jsx)(n.code,{children:"extends"})," keyword to ",(0,r.jsx)(n.em,{children:"inherit"})," property definitions. Interface extension can be useful for objects that tend to align well with inheritance, such as HTML elements in the DOM API. Below is an example from the TypeScript standard definitions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"interface HTMLInputElement extends HTMLElement { /* snip */ }\n"})}),"\n",(0,r.jsx)(n.h4,{children:"Object Types - Type Alias"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"type"})," keyword defines a ",(0,r.jsx)(n.em,{children:"type alias"}),", such as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"type ChessSquare = {\n  row: ChessRow\n  column: ChessColumn\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This ",(0,r.jsx)(n.code,{children:"ChessSquare"}),' type can also be called a "product type", because the total number of possibilities are the product of the possibilities of its members. There are 64 total possible values of a ',(0,r.jsx)(n.code,{children:"ChessSquare"}),", which is ",(0,r.jsx)(n.code,{children:"ChessRow"})," (8) multiplied by ",(0,r.jsx)(n.code,{children:"ChessColumn"})," (8)."]}),"\n",(0,r.jsx)(n.p,{children:"With our knowledge of object types and union types, we can add a new type to our message catalog implementation and update our function return type."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"type MessageTemplate = {\n    message: string\n    style: 'fade-away' | 'click-to-dismiss'\n}\n\nexport function createMessage(messageType: string): MessageTemplate { /* same implementation */ }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is an improvement because now our function returns ",(0,r.jsx)(n.code,{children:"MessageTemplate"})," rather than ",(0,r.jsx)(n.code,{children:"any"}),", so that users of the library actually know what they're going to get when they call our function!"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/play?target=7#code/PQKhCgAIUhVAHAJgQwC4FMDOkBmAnAewFtJUALdSePdANwEsCBXbAYwtYGt4D6A7VAC4oMGAEFEidIkgADALJZMyAOboAKuiLwANmnSzSAT3joR0OEn0zZrGvsWZlawzVRM8fY6ZHBw4VgI+TFRIIiVVdABhNGQdAhVIAF5IAG8oSABJDCIAZWRadFymVlYlQTSMyDCItQqAcmytSEwSsqccJh0dIxaC6QBCeoAaKpbUIx10BpxkKQBaZAB3ZCMRjIBfUeqmvP6AMWR6HQ9pyurq8KdIht3cI6mZVAI+woA6D-WL8cmz+tYdPQuPNnvNEPRMEQIZgvpAtuANv5QBALFF7BhsMgatc1JAlvRyKQKJAVPRCl4rs4NCZKPhiOZyJRWLF4io3pB9gQ8JA+AQlsNIAArFihNweYJEpkshKQdACPBGN6+cDoAAePDwoU6fFYqEYXjs6ActXQAApKZF1DSKiE8PwVABKCqOKmabR6DDnC70HCQc0mq2mSD8bFUmKoOIJB1e77AYCQdS5EnoVDYIhzPEEsjMULkCFyZB8IyyAYDSC5F6F3lGe2lsbVQLBULMiOsiqF3opC1qcORlT1yBizyQFt9gDa3eppgAumNEd9yIQljz0MuAKJ4Qh4U2NPi0OL0GSTwPoIYOhH+CZBl2WrS6fTJGOhm7jO18fvfEK-GZzdCLFZrJAAA+kD-ICwKguCkLQvUF5AA",children:"TS playground link"})]}),"\n",(0,r.jsx)(n.h4,{children:"Object Types - Intersections"}),"\n",(0,r.jsxs)(n.p,{children:["Type aliases can ",(0,r.jsx)(n.strong,{children:"intersect"})," using the ",(0,r.jsx)(n.code,{children:"&"})," keyword to ",(0,r.jsx)(n.em,{children:"compose"})," properties and behavior. Below is a ",(0,r.jsx)(n.strong,{children:"very"})," contrived (and silly) version of the classic animal taxonomy example."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"type Animal = {\n  species: string\n  genus: string\n  family: string\n  order: string\n  class: string\n  phylum: string\n  kingdom: 'Animalia'\n}\n\ntype Oviparous = {\n  laysEggs: true\n  eggWeight: number\n}\n\ntype Venomous = {\n  potency: number\n}\n\ntype Aquatic = {\n  swimSpeed: number\n}\n\ntype Platypus = Animal & Oviparous & Venomous & Aquatic\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"interface"})," and ",(0,r.jsx)(n.code,{children:"type"})," keywords are quite similar in what they can accomplish, and most use cases won't see a difference between them. For a discussion around this, please see the ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces",children:"TypeScript Handbook"}),"."]}),"\n",(0,r.jsx)(n.h3,{children:"Structural Typing"}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsxs)(n.p,{children:["For example, it's fine to do this, even though now ",(0,r.jsx)(n.code,{children:"point"})," has properties that aren't defined on the type, such as ",(0,r.jsx)(n.code,{children:"hasOwnProperty"})," and ",(0,r.jsx)(n.code,{children:"isPrototypeOf"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"const point: { x: number, y: number } = {\n  x: 3,\n  y: 4,\n}\n"})}),"\n",(0,r.jsxs)(s.gE,{children:[(0,r.jsx)(n.p,{children:"Welcome back to those that skipped down the recap. For the remainder of the article, I still\nrecommend following along in your text editor if possible, or by using the"})," ",(0,r.jsx)("a",{href:"https://www.typescriptlang.org/play",target:"_blank",children:(0,r.jsx)(n.p,{children:"TypeScript playground"})}),(0,r.jsx)(n.p,{children:"in a web browser. It is helpful to mouse-over variables and error messages to see more\ninformation."})]}),"\n",(0,r.jsx)(n.p,{children:"With the Quick Recap finished, we can turn our focus back to building the"}),"\n",(0,r.jsx)(n.h2,{children:"Creating Types from Types"}),"\n",(0,r.jsx)(n.p,{children:"With the Quick Recap finished, we can turn our focus back to building our library."}),"\n",(0,r.jsxs)(n.p,{children:["The following sections will follow the list in the TypeScript Handbook, ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/types-from-types.html",children:"Creating Types from Types"})," (though not necessarily in order) as we build this contrived example."]}),"\n",(0,r.jsx)(n.h3,{children:"Generics"}),"\n",(0,r.jsxs)(n.p,{children:["Generics allow us to create flexible and reusable types. One of the most commonly used generic type from the TypeScript standard definitions is the ",(0,r.jsx)(n.code,{children:"Array"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"interface Array<T> {\n  //           \ud83d\udc46\ufe0f  the generic type `T` is defined here\n\n  /* ...arrays have lots of methods... */\n  /* ...we're highlighting just two below... */\n\n  includes(searchElement: T, fromIndex?: number): boolean\n  //                     \ud83d\udc46\ufe0f  this is the same `T` defined above\n\n  pop(): T | undefined\n  //    \ud83d\udc46\ufe0f  also the same `T` defined above\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The generic parameter (in this case, it's called ",(0,r.jsx)(n.code,{children:"T"}),") is telling the TypeScript compiler that the array will have elements of a certain type, but that type will be decided later by each instance of the array. Whenever an array is created, the concrete type for ",(0,r.jsx)(n.code,{children:"T"})," is provided either explicitly or inferred by the compiler (a concrete type is something like ",(0,r.jsx)(n.code,{children:"string"})," or ",(0,r.jsx)(n.code,{children:"number"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"const nums: Array<number> = [1, 2, 3]\n//                  \ud83d\udc46\ufe0f  the concrete type provided explicitly\n\nconst maybeNums: Array<number | null> = [12, 14, 34]\n//                           \ud83d\udc46\ufe0f  concrete type is `number | null` her\n\nconst words = ['four', 'score', 'and', 'seven', 'years', 'ago']\n//         \ud83d\udc46\ufe0f   TypeScript infers here that `T` is `string`\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.code,{children:"words"})," which is ",(0,r.jsx)(n.code,{children:"Array&lt;string>"}),", the function parameter for ",(0,r.jsx)(n.code,{children:"words.includes()"})," is a ",(0,r.jsx)(n.code,{children:"string"})," because ",(0,r.jsx)(n.code,{children:"T"})," is ",(0,r.jsx)(n.code,{children:"string"})," in this instance."]}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.code,{children:"maybeNums"}),", the return type of ",(0,r.jsx)(n.code,{children:"maybeNums.pop()"})," is ",(0,r.jsx)(n.code,{children:"number | null | undefined"}),", because ",(0,r.jsx)(n.code,{children:"T"})," is ",(0,r.jsx)(n.code,{children:"number | null"})," in this instance."]}),"\n",(0,r.jsxs)(s.gE,{children:[(0,r.jsxs)(n.p,{children:["Note that ",(0,r.jsx)(n.code,{children:"T[]"})," is a special syntax for ",(0,r.jsx)(n.code,{children:"Array&lt;T&gt;"}),". ",(0,r.jsx)(n.code,{children:"T[]"})," tends to be preferred because it's more concise, and from this point forward the examples will use this syntax."]}),(0,r.jsx)(n.p,{children:"Despite this extra detail, `Array<T>` is a good introduction into understanding generics in TypeScript because it can show type inference, function parameters, and function return types as generic types for a data structure that everyone is familiar with."})]}),"\n",(0,r.jsx)(n.h4,{children:"Generics - Update"}),"\n",(0,r.jsxs)(n.p,{children:["Now that we know about generic parameters, we can use the ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",children:"Record utility type"})," to update our ",(0,r.jsx)(n.code,{children:"messageCatalog"})," variable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"type MessageCatalog = Record<string, MessageTemplate>\n\n/* snip */\n\nconst messageCatalog: MessageCatalog = { /* snip */ }\n\nexport function createMessage(messageType: string): MessageTemplate {\n    if (messageType in messageCatalog) {\n      return messageCatalog[messageType]\n    }\n    throw new Error('Invalid messageType!')\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we can get rid of the ",(0,r.jsx)(n.code,{children:"any"})," with no red squiggly lines! Progress!"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/play?target=7#code/PQKhCgAIUhVAHAJgQwC4FMDOkBmAnAewFtJUALdSePdANwEsCBXbAYwtYGt4D6A7VAC4oMGAEFEidIkgADALJZMyAOboAwmmQAbAitmkAnvHQjocJGmlyiS1Rq279RkyODhwrAn0ypItzGU1TVQdPUFIRUD7ELCVSABeSABvKEgASQwiAGVkWnRsplZWJQjUyAr-OzUIgHJM9BJMIpLAnCZtbUNIZXzEAEJagBo0it9DbXQ6nGQpAFpkAHdkQ2G0gF8RioacvPQAMWR6bSYaMtGq6JrIeqzcI8mZVAIevYA6D7XKntQJqZvWNp6Fw5s85oh6JgiJDMF9IJtwOsPKAIOZ1DQrNhkJcgpRFvRyKQKJAVPR8nwcfYACrGSj4YhmciUViOPRvSD7Ah4SB8AiLIaQABWLD8NFQpx8ROZrPi6AEeEMbzc4HafFYqEYFNYGIwUVxAAoAriaSYIr48PwVABKCJ66mNeDaKwpC70HCQQ3VdAmyj8SnBGVWl3fCpiiX+hyhJwAbSN1NpAF0LkjvuRCIseegMwBRPCEPD6+p8Wg6egyONqH2DK2Ijy-EyRL2xJyJSAAJXQXjwiAAPObLQK7ZWHU6MAA+Ou0xtXb0j51JcqVCv-ft8FQXcaTaazdALZarSAAHwBQJBYIhUJhtVrQA",children:"TS playground link"})]}),"\n",(0,r.jsx)(n.p,{children:"The neat thing about this now is that we've also partially implemented one of our requirements:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"[The UX team] are comfortable with code, but not experts, so we're going to want to make sure the catalog doesn't let them set up incorrect entries."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["By defining the ",(0,r.jsx)(n.code,{children:"messageCatalog"})," variable as having the ",(0,r.jsx)(n.code,{children:"MessageCatalog"})," type, we've made it impossible for entries to be added that aren't of the ",(0,r.jsx)(n.code,{children:"MessageTemplate"})," shape. This is a good thing! This is something that we want to catch at compile-time rather than at runtime."]}),"\n",(0,r.jsx)(n.h4,{children:"Generics - Constraints"}),"\n",(0,r.jsxs)(n.p,{children:["Generic types can also be ",(0,r.jsx)(n.strong,{children:"constrained"})," with the ",(0,r.jsx)(n.code,{children:"extends"})," keyword. In this example, the function argument ",(0,r.jsx)(n.code,{children:"colors"})," must be an array with elements of the ",(0,r.jsx)(n.code,{children:"Color"})," type."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"type Color = 'red' | 'blue' | 'green'\n\nfunction randomColor<T extends Color>(colors: T[]): T {\n  const randomIndex = Math.floor(Math.random() * colors.length)\n  return colors[randomIndex]\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"For those readers experienced with TypeScript, this may just be review. However, two important properties of generics will be crucial for our contrived example of the toast messages library."}),"\n",(0,r.jsx)(n.h4,{children:"Generics - Important Property 1: It's the Same T"}),"\n",(0,r.jsx)(n.p,{children:"TODO: insert Pam Office meme It's the same T"}),"\n",(0,r.jsxs)(n.p,{children:["Any generic ",(0,r.jsx)(n.code,{children:"T"})," used within a ",(0,r.jsx)(n.code,{children:"type"})," / ",(0,r.jsx)(n.code,{children:"interface"})," / ",(0,r.jsx)(n.code,{children:"function"})," is the ",(0,r.jsxs)(n.strong,{children:["same ",(0,r.jsx)(n.code,{children:"T"})]})," when it's instantiated / called. Taking the same ",(0,r.jsx)(n.code,{children:"randomColor"})," function from the previous section:"]}),"\n",(0,r.jsx)(n.p,{children:"TODO: insert Pam Office meme It's the same T"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"randomColor(['red', 'red', 'red'])\n//        \ud83d\udc46\ufe0f  `T` is inferred as 'red' only because the return type of the function is the *same* `T`\n\nrandomColor(['red', 'blue', 'blue'])\n//        \ud83d\udc46\ufe0f  `T` is inferred as 'red' | 'blue' because the return type is the *same* `T`\n"})}),"\n",(0,r.jsx)(n.p,{children:"If we had a function with the exact same implementation, but instead had a signature that used a concrete type rather than a generic type, we would see a difference in the return type of the function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function randomColorConcrete(colors: Color[]): Color {\n  /* same implementation */\n}\n\nrandomColorConcrete(['red', 'red', 'red'])\n//    \ud83d\udc46\ufe0f  returns `Color`, not 'red'\n\nrandomColorConcrete(['red', 'blue', 'blue'])\n//    \ud83d\udc46\ufe0f  returns `Color`, not 'red' | 'blue'\n"})}),"\n",(0,r.jsx)(n.h4,{children:"Generics - Important Property 2: Generics are Resolved at the Usage Site"}),"\n",(0,r.jsx)(n.p,{children:"TODO"}),"\n",(0,r.jsx)(n.p,{children:"This example using Color is even more contrived than the overall example we're building in this article, but it shows a subtle but important aspect of generics that we'll use to our advantage later."}),"\n",(0,r.jsxs)(s.gE,{children:[(0,r.jsxs)(n.p,{children:["For some reason, in TypeScript, people tend to define generic parameters with single uppercase letters, such as ",(0,r.jsx)(n.code,{children:"T"}),", which presumably is short for ",(0,r.jsx)(n.code,{children:"Type"})," as a generic word. Perhaps the single letters help to indicate that the type is generic to constrast with names of concrete types that also start with an uppercase letter (people rarely, if ever, defined concrete types with a single letter)."]}),(0,r.jsxs)(n.p,{children:["The first language known to have generic types was ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/ML_(programming_language)",children:"ML (programming language)"}),". In that language, generics (",(0,r.jsx)(n.a,{href:"https://smlhelp.github.io/book/concepts/poly.html",children:"parametric polymorphism"}),") use a single apostrophe, so there isn't confusion between generic and concrete types. For example, ",(0,r.jsx)(n.code,{children:"'a"})," would be a generic type."]}),(0,r.jsxs)(n.p,{children:["It's possible that the single letter uppercase convention originated in ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Generic_programming#Templates_in_C++",children:"C++ templates"}),"."]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/generics.html",children:"TypeScript Handbook - Generics"})}),"\n",(0,r.jsx)(n.h3,{children:"Type Operators"}),"\n",(0,r.jsxs)(n.p,{children:["TypeScript has a concept of a ",(0,r.jsx)(n.strong,{children:"type context"})," and an ",(0,r.jsx)(n.em,{children:"expression context"}),". A ",(0,r.jsx)(n.strong,{children:"type context"})," consists of the syntax that TypeScript has added on top of JavaScript - variable types, function parameter types, return types, generic constraints, etc., and it does not exist in the compiled JavaScript code. An ",(0,r.jsx)(n.em,{children:"expression context"})," is everywhere else that's normal JavaScript code."]}),"\n",(0,r.jsxs)(n.h4,{children:["Type Operators - ",(0,r.jsx)(n.code,{children:"typeof"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"typeof"})," operator is ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",children:"already an operator"})," in an ",(0,r.jsx)(n.em,{children:"expression context"}),", so the TypeScript team decided to reuse this keyword in a ",(0,r.jsx)(n.strong,{children:"type context"})," to avoid defining new keywords (the TypeScript team prefers to not define new keywords/syntax when possible). In a ",(0,r.jsx)(n.strong,{children:"type context"}),", ",(0,r.jsx)(n.code,{children:"typeof"})," will provide the type for the given value. That's sort of a circular definition... so perhaps an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"const blackColor = 'black'\n\nfunction paintItBlack(color: blackColor) {\n                          //  \ud83d\udc46 Error: 'blackColor' refers to a value, but is being used as a type here.\n    console.log(`I see a red door and I want it painted ${color}`)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can't use the ",(0,r.jsx)(n.code,{children:"blackColor"})," variable in a type context (because it's a ",(0,r.jsx)(n.em,{children:"value"})," not a ",(0,r.jsx)(n.strong,{children:"type"}),"), but we can turn this value into a type with the ",(0,r.jsx)(n.code,{children:"typeof"})," operator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"const blackColor = 'black'\n\nfunction paintItBlack(color: typeof blackColor) {\n    console.log(`I see a red door and I want it painted ${color}`)\n}\n\npaintItBlack('yellow?')\n             //  \ud83d\udc46 Error, which is what we want here!\n"})}),"\n",(0,r.jsxs)(s.gE,{children:[(0,r.jsxs)(n.p,{children:["Recall the example from the beginning of the article, how would the ",(0,r.jsx)(n.code,{children:"typeof"})," work differently if the ",(0,r.jsx)(n.code,{children:"blackColor"})," variable was defined with ",(0,r.jsx)(n.code,{children:"let"})," instead of ",(0,r.jsx)(n.code,{children:"const"}),"?"]}),(0,r.jsxs)(n.p,{children:["Try using the ",(0,r.jsx)(n.code,{children:"typeof"})," operator on a variable that is an object and hover your mouse over the resulting type. Now try with the same object variable with an ",(0,r.jsx)("a",{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions",children:"as const"})," assertion. What is the difference in the resulting type?"]}),(0,r.jsxs)(n.p,{children:["Try the ",(0,r.jsx)(n.code,{children:"typeof"})," operator with an array variable with and without ",(0,r.jsx)(n.code,{children:"as const"}),". What is the difference in the resulting type?"]})]}),"\n",(0,r.jsxs)(n.p,{children:["Note that the ",(0,r.jsx)(n.code,{children:"typeof"})," operator can derive types from values. There is no conversion the other way, values cannot be derived from types like in languages that support procedural macros (example: ",(0,r.jsx)(n.a,{href:"https://serde.rs/derive.html",children:"Serde's derive macros"})," in Rust). This one-way conversion is why libraries such as ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/zod",children:"zod"})," and ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/io-ts",children:"io-ts"})," have the user create their schema as a value and then derive the type."]}),"\n",(0,r.jsxs)(n.h4,{children:["Type Operators - ",(0,r.jsx)(n.code,{children:"keyof"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"keyof"})," type operator creates a union type from an object type. In the example below, ",(0,r.jsx)(n.code,{children:"Array"})," is an ",(0,r.jsx)(n.code,{children:"interface"})," (an object type) from the TypeScript standard definitions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:'type ArrayMethod = keyof Array<unknown>\n      //  \ud83d\udc46 Union type of "filter" | "map" | "reduce" | "concat" | etc...\n\nfunction openArrayDocumentation(methodName: ArrayMethod) {\n  const urlSafeMethodName = encodeURI(String(methodName));\n  window.open(`https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/${urlSafeMethodName}`)\n}\n\nopenArrayDocumentation(\'flatmap\')   // \u274c Correctly causes a type error\nopenArrayDocumentation(\'flatMap\')   // \u2705 Correctly has no errors\n'})}),"\n",(0,r.jsx)(n.h4,{children:"Type Operators - Practical Usage"}),"\n",(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"typeof"})," and ",(0,r.jsx)(n.code,{children:"keyof"})," type operators, we can now implement the following requirement from before:"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"The front-end application developers should be able to easily call a type-safe API of the library to get the necessary message to display in the application"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Currently, our ",(0,r.jsx)(n.code,{children:"createMessage"})," function has a permissive parameter type -- it accepts any ",(0,r.jsx)(n.code,{children:"string"}),", even strings that are not valid message types."]}),"\n",(0,r.jsxs)(n.p,{children:["Our current implementation ",(0,r.jsx)(n.code,{children:"throw"}),"s an error when an invalid message type is passed in, so technically we are meeting the requirement. However, throwing an error from a ",(0,r.jsx)(n.em,{children:"library"})," in TypeScript puts the users of our library in a difficult position. Our library type definitions will be compiled into ",(0,r.jsx)(n.code,{children:".d.ts"})," files, and there's no indication in the function signature that the function might ",(0,r.jsx)(n.code,{children:"throw"})," -- the caller sees a ",(0,r.jsx)(n.code,{children:"string -> MessageTemplate"})," signature and would have no idea that it could ",(0,r.jsx)(n.code,{children:"throw"}),", and neither will the compiler. We've pushed the reponsibility to the caller of handling the error case but without providing any information that the error case exists. A better way to push the responsibility to the caller would be to remove the ",(0,r.jsx)(n.code,{children:"throw"})," and instead return ",(0,r.jsx)(n.code,{children:"MessageTemplate | undefined"}),", at least in that case the compiler will help the users of our library know what might be returned."]}),"\n",(0,r.jsx)(n.p,{children:"[TODO](image bad_input_output.png)"}),"\n",(0,r.jsxs)(n.p,{children:["Another approach is to ",(0,r.jsx)(n.a,{href:"https://www.parsonsmatt.org/2017/10/11/type_safety_back_and_forth.html",children:'push the constraint "earlier"'}),' instead of "later". We can narrow the types of inputs into our library, which allows us to guarantee a valid output.']}),"\n",(0,r.jsxs)(n.h3,{children:["Type Operator - ",(0,r.jsx)(n.code,{children:"typeof"})]}),"\n",(0,r.jsxs)(n.p,{children:["=======\nAnother approach is to ",(0,r.jsx)(n.a,{href:"https://www.parsonsmatt.org/2017/10/11/type_safety_back_and_forth.html",children:'push the constraint "earlier"'}),' instead of "later". We can narrow the type of the accepted input, which allows us to guarantee a valid output.']}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"add additional detail in type operators"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"[TODO](image good_input_output.png)"}),"\n",(0,r.jsxs)(n.p,{children:["It would be great if our ",(0,r.jsx)(n.code,{children:"createMessage"})," function only accepted valid input, and the user of our library receives a compile-time error if they try to call the function with invalid input. With the ",(0,r.jsx)(n.code,{children:"typeof"})," and ",(0,r.jsx)(n.code,{children:"keyof"})," type operators, we can do this!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"// Removed the `MessageCatalog` type, for now\nconst messageCatalog = {\n  // same implementation\n} as const\n\ntype MessageType = keyof typeof messageCatalog\n\n/**\n * Creates a message with the given messageType from\n * the catalog. For now, just returns the catalog entry.\n */\nexport function createMessage(messageType: MessageType): MessageTemplate {\n  // same implementation\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["With this change, we actually now get autocomplete on calling the ",(0,r.jsx)(n.code,{children:"createMessage"})," function."]}),"\n",(0,r.jsx)(n.p,{children:"[TODO](image create_message_autocomplete.png)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"More important than autocompletion"}),", TypeScript has a compile-time error if the function is called with incorrect inputs. The knowledge of how to use our library is no longer ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Out-of-band_data",children:"out-of-band"})," in a documentation page somewhere that may become stale, it's encoded directly into the type system and the function signature."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/play?target=7#code/PQKhCgAIUhVAHAJgQwC4FMDOkBmAnAewFtJUALdSePdANwEsCBXbAYwtYGt4D6A7VAC4oMGAEFEiSAAMAslkzIA5ugAqAT3jppkZHylMkaStNY1j8zIpU7M9JXzRMaI6JABK6IgVropchWV0AGE0ZAAbAiUdVE1KfGIZIkCVUNQIqJ0AChwCPEg+AgB3AEpXcUkZZDYCPkxUGIIklJCwyOiRYHBwVlr6yGSrILSMpUgAXkgAbyhIAEkMIgBlZF8lplZWBUFp2cgBlp2AcgWvSEwNrascJnDw9XPVvwBCI4AaPfPY8PRjnGREOgALTIIrIdTvWYAXw++1OyyeADFkPRws5frt9vtBtYMSdFrgUT8pKgmopfAA6KmQrFfdQ-Y6scL0LhA0lAxD0TBELmYGmQGHgKG6Gp1VDdUAQNzBcwYbDIA5DFSQIr0cikCiQJT0Xx8RW4jRaXCEIiuciUVhtKIUyCIvIFYpvSAAKxYqEgNFQzjqGotVrG6AEeHUFM64BufFYqEYerM6AsLSyOKChoxlgNcRKO3TKa88HCxkxHvQXrweuTqX9AG0K2o4gBdIXdWJGnMqVMTSCcdDqAg4UhxPv64b+iXASAAdXQRzuWpLkAARsguKQmuQuQOjfxfQV0AAPd3sdBcHj8cXAcctyht1rpdqdzy9PCIAA89Tw-CUTpvqjzBYwAB8zZxJAP5-oWkwzLStY7O+n6fPU9J4v8gIgmCEKQAAPpARxMiynBsgQHJcjyVhHE2QA",children:"TS playground link"})]}),"\n",(0,r.jsxs)(n.p,{children:["However, the downside is that we lost the type safety on the ",(0,r.jsx)(n.code,{children:"messageCatalog"})," variable itself, in order to get the keys of this object using ",(0,r.jsx)(n.code,{children:"keyof"})," we had to remove the type definition of ",(0,r.jsx)(n.code,{children:"Record<string, MessageTemplate>"})," on that variable, because the ",(0,r.jsx)(n.code,{children:"keyof"})," a ",(0,r.jsx)(n.code,{children:"Record<string, T>"})," would only be ",(0,r.jsx)(n.code,{children:"string"}),", not a union of literals. It seems that we have two things fundamentally at odds -- we want to get a type that is the ",(0,r.jsx)(n.code,{children:"keyof"})," an object, but we also want to constrain the shape of that object. Trying to do this directly (",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/play?target=7#code/PQKhCgAIUhVAHAJgQwC4FMDOkBmAnAewFtJUALdSePdANwEsCBXbAYwtYGt4D6A7VAC4oMGAGF6eVkwA2yPJBo50NPq0oB3MvXaQNBPgHJUegnk6RBAChHBw4VgcwmiWTMgDm6MWmQyCHoKQALJunt6+-h6QALyQAN5QkACSGEQAysi06OlMrOqYmEGJkKWQroXhQYap6CSYeQWYOLIyAJ6Q7tmIAISGADRJpc5tMujVOMiI6AC0yBrIbQNJAL6DpbUZWegAYsj0Mkw0xUPlYV7Vm7j7Y4ikBJ3bAHQvy2WdqKPjkIasMjqcGaoAgzRD0TBEcGYN6QNbgFaQZBsJyoeygCDQSBiGhoLCIs6VLx6ejkUgUSAeejZPgE9xeAAqbXglHwxBEZMorEiASekB2ZkgfAIGn6kAAViwTDRUEc+NhyJzudF0AI8G0nrZwC01KhGDTWDiMKFCegrBU6ehGcygsaLVb0ABKG3nS11eByDAJJLS2W08I+VB+AIAbXN4XtAF14fZPsyQi77bFIJx0G0CDhSEz0Om-V4A0GPDGs-GTfmokmAEroRx4RAAHlt4azosbDLdHvQAD4i3HW66iO7cUmSmUwxcPnh+IX3iMxhMprN5otDJAAD4-P4AoEgsEQqGGaNAA",children:"TS playground link"}),") causes a circular reference which won't compile."]}),"\n",(0,r.jsxs)(n.p,{children:["So can we ",(0,r.jsx)(n.a,{href:"https://dictionary.cambridge.org/us/dictionary/english/have-your-cake-and-eat-it-too",children:"have our cake and eat it too"}),"? Well yes, one would hope so, otherwise that's a waste of cake! We cannot directly have a circular reference, so we solve this like any other circular reference by introducing an ",(0,r.jsx)(n.em,{children:"abstraction"}),", and the ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Lambda_calculus",children:"fundamental unit of abstraction"})," is a function!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function createMessageCatalog<T extends MessageCatalog>(catalog: T): T {\n  return catalog\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/play?target=7#code/PQKhCgAIUhVAHAJgQwC4FMDOkBmAnAewFtJUALdSePdANwEsCBXbAYwtYGt4D6A7VAC4oIYOHCsCfTKkhEsmZAHN0AYTTIANgSWQAvJFY006ALILlajdqUAKAN5RIASQxEAyslrp3TVqwVBSEdIULkLFSCAcld0Ekw-AMxMHCZNTQBPSEVvRABCKIAaJ1CZDM10aJxkRHQAWmQAd2QMoqcAX2LQ2I8vdAAxZHpNJhogkLD5ZMtontwhisRSAmy+gDoNtrDs1HLKyCjWTXouOtQCOsR6TCJrzC3ITvB2yGQ2KRkASnFQCGhIVTGDDYZDhaYqSCNejkUgUSBKejePhgxQqAAqGXglHwxBEsMorGsOjWkH6BDwkD4BEahUgACsWLIaKhRtJ8YYibp0AI8Bk1iIxOgAB48PCyVJ8VioRjIozoEzmcHoWxTVHoDFYoKKtUa9CfLURdVxeCaEzBJzM1koyzqVBaHQAbVVll1AF1nuIJVKZYYgWZDbb7UoADxoyDCjB8RDYbU2zkAPlshLtNiCaP1kDDE0teFlnI94F2WMgsfRmMoBk46AyBBwpHLtetKkDNnERcopasKZ0+kgACV0JI8IhgzI8PwlLTO2jjaaMPG2+WS4aZ0QTWaDBNnZEduO+EonGUKlUavUmi0opAAD4HI4nThnC5XG53KIeoA",children:"TS playground link"})]}),"\n",(0,r.jsxs)(n.p,{children:["The solution to this problem involved recalling what we learned earlier about generics and generic constraints. This fixed the circular reference issue because the ",(0,r.jsx)(n.code,{children:"T"})," of ",(0,r.jsx)(n.code,{children:"createMessageCatalog"})," is resolved at the callsite, and the ",(0,r.jsx)(n.code,{children:"keyof typeof messageCatalog"})," for ",(0,r.jsx)(n.code,{children:"MessageType"}),' is resolved at the definition site. With this abstraction, we\'re able to accomplish two of our requirements - enforce the shape of the message catalog and use that shape downstream to constrain the inputs of our public function(s). This "trick" is quite useful in both application and library code to ensure consistency and correctness of data and types.']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/keyof-types.html",children:"TypeScript Handbook - keyof"}),"\n",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/typeof-types.html",children:"TypeScript Handbook - typeof"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\ud83d\udea7"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{children:"Indexed Access Types"}),"\n",(0,r.jsxs)(n.p,{children:["Indexed access types allow extracting a type from existing object types using ",(0,r.jsx)(n.code,{children:"["})," and ",(0,r.jsx)(n.code,{children:"]"}),", similar to the syntax for accessing an object value with ",(0,r.jsx)(n.code,{children:"["})," and ",(0,r.jsx)(n.code,{children:"]"}),". As with many TypeScript features, this isn't significant on its own but composes well with other features. An important example from the TypeScript standard definitions is the famous ",(0,r.jsx)(n.code,{children:"window.addEventListener"})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"addEventListener<K extends keyof WindowEventMap>(type: K, listener: (ev: WindowEventMap[K]) => any): void;\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"WindowEventMap"})," in the TypeScript standard definitions is an ",(0,r.jsx)(n.code,{children:"interface"})," with all possible events and their corresponding event type. For example ",(0,r.jsx)(n.code,{children:'"click"'})," corresponds with ",(0,r.jsx)(n.code,{children:"MouseEvent"})," and ",(0,r.jsx)(n.code,{children:'"gamepadconnected"'})," corresponds with ",(0,r.jsx)(n.code,{children:"GamepadEvent"}),". Using generics, ",(0,r.jsx)(n.code,{children:"keyof"}),", literal types, and indexed access types, the compiler can ensure complete type safety of ",(0,r.jsx)(n.code,{children:"addEventListener"}),'. If "gamepadconnected" is passed as the first parameter, it will typecheck that the second parameter is a callback with a ',(0,r.jsx)(n.code,{children:"GamepadEvent"})," parameter."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"WindowEventMap[K]"}),' syntax means that the "ev" parameter of the "listener" callback is the type in that map at the key ',(0,r.jsx)(n.code,{children:"K"}),". This is a unique feature of TypeScript compared to other languages! Even languages with an advanced type system like Rust ",(0,r.jsx)(n.a,{href:"https://willcrichton.net/notes/types-over-strings/",children:"incur a small runtime cost"})," to ensure this kind of type safety."]}),"\n",(0,r.jsx)(n.p,{children:"TODO - need an example for this"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html",children:"TypeScript Handbook - Indexed Access Types"})}),"\n",(0,r.jsx)(n.h3,{children:"Conditional Types"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html",children:"TypeScript Handbook - Conditional Types"})}),"\n",(0,r.jsx)(n.h3,{children:"Mapped Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"const translationsStatus = {\n  'en-AU': true,\n  'en-UK': false,\n  'en-US': true,\n  'fr-CA': true,\n  'fr-FR': true,\n  'pt-BR': false,\n  'pt-PT': false,\n} as const\n\n// https://stackoverflow.com/a/54520829\n\ntype KeysMatching<T, V> = {\n  [K in keyof T]: T[K] extends V ? K : never\n}[keyof T]\n\ntype KeysWithValsOfType<T extends Record<string, unknown>, V> = keyof {\n  [P in keyof T as T[P] extends V ? P : never]: P\n}\n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/mapped-types.html",children:"TypeScript Handbook - Mapped Types"})}),"\n",(0,r.jsx)(n.h3,{children:"Template Literal Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-TypeScript",children:"/**\n * Given a string, extracts variable names from between\n * `{{` and `}}` delimiters and returns an object type with\n * those variable names as the required keys.\n */\ntype ExtractInterpolatedVariables<\n  S extends string,\n  VarNames extends string[] = []\n> = S extends `${string}{{${infer Var}}}${infer Rest}`\n  ? ExtractInterpolatedVariables<Rest, [Var, ...VarNames]>\n  : VarNames extends []\n    ? Record<string, never> // special first case: empty object when there are no variables\n    : { [Prop in VarNames[number]]: string } // exit recursion case: no variables left to interpolate\n\nconst withZeroVariables = 'Hello, world!'\ntype WithZeroVariables = typeof withZeroVariables\ntype Test0 = ExtractInterpolatedVariables<WithZeroVariables>\n\nconst withOneVariable = 'Welcome {{userName}}.'\ntype WithOneVariable = typeof withOneVariable\ntype Test1 = ExtractInterpolatedVariables<WithOneVariable>\n\nconst withTwoVariables = '{{userName}} sent you a message:\\n{{shortMessage}}'\ntype WithTwoVariables = typeof withTwoVariables\ntype Test2 = ExtractInterpolatedVariables<WithTwoVariables>\n\nfunction interpolateMessage<T extends string>(\n  message: T,\n  variablesToInterpolate: ExtractInterpolatedVariables<T>\n): string {\n  let newMessage: string = message\n  for (const [varName, value] of Object.entries(variablesToInterpolate)) {\n    newMessage = newMessage.replace(`{{${varName}}}`, value)\n  }\n  return newMessage\n}\n\n// should pass\ninterpolateMessage(withZeroVariables, {})\ninterpolateMessage(withOneVariable, { userName: 'Ada' })\ninterpolateMessage(withTwoVariables, { userName: 'Bob', shortMessage: 'Hello, world!' })\n\n// should fail\ninterpolateMessage(withZeroVariables, { bad: 'one' })\ninterpolateMessage(withOneVariable, { username: 'Ada' })\ninterpolateMessage(withTwoVariables, { bad1: 'Ada', bad2: 'Bob' })\n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html",children:"TypeScript Handbook - Template Literal Types"})})]})},t=e.components||{},a=t.wrapper;return a?(0,r.jsx)(a,Object.assign({},e,{children:(0,r.jsx)(n,{})})):n()}},169:function(e){e.exports={badge:"Badge_badge__qO7Qw","badge--dark":"Badge_badge--dark__atTyP"}},7238:function(e){e.exports={box:"EmphasisBox_box__zCUGQ"}},320:function(e){e.exports={"blog-listing":"BlogListing_blog-listing__uOgKb",wip:"BlogListing_wip__hg9xy"}},8131:function(e){e.exports={details:"Spoiler_details__gotJo",detailsContent:"Spoiler_detailsContent__yhV_z",summary:"Spoiler_summary__6Nxkr"}},1664:function(e,n,t){e.exports=t(8418)},8357:function(e,n,t){"use strict";t.d(n,{w_:function(){return l}});var r=t(7294),s={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},a=r.createContext&&r.createContext(s),i=function(){return i=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var s in n=arguments[t])Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s]);return e},i.apply(this,arguments)},o=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&"function"===typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)n.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(t[r[s]]=e[r[s]])}return t};function c(e){return e&&e.map((function(e,n){return r.createElement(e.tag,i({key:n},e.attr),c(e.child))}))}function l(e){return function(n){return r.createElement(d,i({attr:i({},e.attr)},n),c(e.child))}}function d(e){var n=function(n){var t,s=e.attr,a=e.size,c=e.title,l=o(e,["attr","size","title"]),d=a||n.size||"1em";return n.className&&(t=n.className),e.className&&(t=(t?t+" ":"")+e.className),r.createElement("svg",i({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},n.attr,s,l,{className:t,style:i(i({color:e.color||n.color},n.style),e.style),height:d,width:d,xmlns:"http://www.w3.org/2000/svg"}),c&&r.createElement("title",null,c),e.children)};return void 0!==a?r.createElement(a.Consumer,null,(function(e){return n(e)})):n(s)}}},function(e){e.O(0,[445,415,260,866,774,888,179],(function(){return n=6798,e(e.s=n);var n}));var n=e.O();_N_E=n}]);